<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Smolagents on christianson.ai</title>
    <link>//localhost:1313/tags/smolagents/</link>
    <description>Recent content in Smolagents on christianson.ai</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/smolagents/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Entirely local AI agent in 44 lines of code using Qwen3 30B A3B</title>
      <link>//localhost:1313/posts/local-ai-agent/</link>
      <pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/local-ai-agent/</guid>
      <description>A minimal but powerful local AI agent implementation using smolagents and Qwen3 30B that runs entirely on your machine</description>
      <content:encoded><![CDATA[<p>Building a fully functional AI agent doesn&rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B model. This implementation demonstrates the elegance of modern AI frameworks and the accessibility of running large language models locally.</p>
<h2 id="the-complete-agent">The Complete Agent</h2>
<p>Here&rsquo;s the entire implementation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to run: uv run --with &#39;smolagents[mlx-lm]&#39; --with ddgs smol.py &#39;how much free disk space do I have?&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> smolagents <span style="color:#f92672">import</span> CodeAgent, MLXModel, tool
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> subprocess <span style="color:#f92672">import</span> run
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@tool</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write_file</span>(path: str, content: str) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Write text.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      path (str): File path.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      content (str): Text to write.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      str: Status.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        open(path, <span style="color:#e6db74">&#34;w&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>write(content)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;saved:</span><span style="color:#e6db74">{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;error:</span><span style="color:#e6db74">{</span>e<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@tool</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sh</span>(cmd: str) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Run a shell command.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      cmd (str): Command to execute.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      str: stdout+stderr.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> run(cmd, shell<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, capture_output<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, text<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>stdout <span style="color:#f92672">+</span> r<span style="color:#f92672">.</span>stderr
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;error:</span><span style="color:#e6db74">{</span>e<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;usage: python agent.py &#39;your prompt&#39;&#34;</span>); sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    common <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.&#34;</span>
</span></span><span style="display:flex;"><span>    agent <span style="color:#f92672">=</span> CodeAgent(
</span></span><span style="display:flex;"><span>        model<span style="color:#f92672">=</span>MLXModel(model_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2&#34;</span>, max_tokens<span style="color:#f92672">=</span><span style="color:#ae81ff">8192</span>, trust_remote_code<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>),
</span></span><span style="display:flex;"><span>        tools<span style="color:#f92672">=</span>[write_file, sh],
</span></span><span style="display:flex;"><span>        add_base_tools<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>    print(agent<span style="color:#f92672">.</span>run(<span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>:]) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">+</span> common))
</span></span></code></pre></div><h2 id="what-makes-this-special">What Makes This Special</h2>
<p>This tiny agent packs a surprising amount of functionality:</p>
<ol>
<li><strong>Completely Local</strong>: Runs entirely on your machine with no external API calls</li>
<li><strong>Powerful Model</strong>: Uses the Qwen3 30B model optimized for Apple Silicon via MLX</li>
<li><strong>Tool Integration</strong>: Can execute shell commands and write files</li>
<li><strong>Simple Interface</strong>: Just pass your question as a command-line argument</li>
</ol>
<h2 id="key-components">Key Components</h2>
<h3 id="the-model">The Model</h3>
<p>The agent uses <code>mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2</code>, a quantized version of Qwen3 30B optimized for coding tasks. The 4-bit quantization makes it possible to run this large model on consumer hardware while maintaining excellent performance.</p>
<h3 id="custom-tools">Custom Tools</h3>
<p>Two simple but powerful tools are defined:</p>
<ul>
<li><strong><code>write_file</code></strong>: Allows the agent to create and modify files</li>
<li><strong><code>sh</code></strong>: Enables execution of any shell command</li>
</ul>
<h3 id="the-framework">The Framework</h3>
<p>Built on <code>smolagents</code>, a lightweight framework that makes it easy to create AI agents with tool-calling capabilities. The <code>CodeAgent</code> class handles the orchestration between the model and tools.</p>
<h2 id="running-the-agent">Running the Agent</h2>
<p>Getting started is remarkably simple with <code>uv</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>uv run --with <span style="color:#e6db74">&#39;smolagents[mlx-lm]&#39;</span> --with ddgs smol.py <span style="color:#e6db74">&#39;how much free disk space do I have?&#39;</span>
</span></span></code></pre></div><p>This command:</p>
<ol>
<li>Installs the required dependencies (<code>smolagents</code> with MLX support and <code>ddgs</code> for web search)</li>
<li>Runs the agent with your question</li>
<li>The agent analyzes the request and executes <code>df -h</code> to check disk space</li>
</ol>
<h2 id="example-use-cases">Example Use Cases</h2>
<p>The agent can handle a variety of tasks:</p>
<ul>
<li><strong>System Information</strong>: &ldquo;How much RAM is being used?&rdquo;</li>
<li><strong>File Operations</strong>: &ldquo;Create a README.md file for a Python project&rdquo;</li>
<li><strong>Code Analysis</strong>: &ldquo;What Python files are in this directory?&rdquo;</li>
<li><strong>Development Tasks</strong>: &ldquo;Check if there are any TODO comments in my code&rdquo;</li>
</ul>
<h2 id="the-power-of-simplicity">The Power of Simplicity</h2>
<p>What&rsquo;s remarkable about this implementation is how much functionality is achieved with so little code. By leveraging modern frameworks like <code>smolagents</code> and optimized models like Qwen3 30B, we can create sophisticated AI agents without the complexity traditionally associated with such systems.</p>
<p>This approach demonstrates that powerful AI tools don&rsquo;t need to be black boxes running in the cloud. With the right tools and frameworks, anyone can build and customize their own AI agents that run entirely under their control.</p>
<h2 id="get-the-code">Get the Code</h2>
<p>The complete implementation is available as a GitHub Gist: <a href="https://gist.github.com/ai-christianson/a1052e6db7a97c50bea9ef2f4da5e4bd">smol.py</a></p>
<p>Try it out and see what you can build with just 44 lines of code!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
