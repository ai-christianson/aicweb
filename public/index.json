[{"content":"When we first started building RA.Aid, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\nInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\nThe beginning of our journey: RA.Aid\u0026#39;s initial announcement in the Aider Discord This integration, however, had trade-offs. Each interaction with Aider meant an additional layer of complexity and expense. RA.Aid had to pass context and instructions to Aider, wait for edits, parse the results, and then reconcile its internal state with these changes. This indirect process sometimes led to mismatches and introduced latency into the otherwise fluid agent loop.\nOver time, it became clear that RA.Aid\u0026rsquo;s own capabilities were quickly outgrowing the original reliance on Aider. Our community\u0026rsquo;s contributions to RA.Aid\u0026rsquo;s reasoning and planning tools—such as the built-in expert query system, file tracking, fuzzy search, ripgrep integration, and Tavily-powered web searches—were becoming robust enough to handle editing tasks directly. Essentially, we found ourselves using Aider predominantly as a basic file editor, no longer leveraging its full potential. This was a clear signal: it was time for RA.Aid to evolve.\nThe recent launch of Sonnet 3.7 and RA.Aid\u0026rsquo;s version 0.15.0 marked the perfect moment to introduce our new \u0026ldquo;aider-free\u0026rdquo; mode. Sonnet 3.7 is significantly better at performing reliable and consistent partial file edits compared to earlier models. This enhanced reliability was the tipping point, giving us confidence that RA.Aid could handle editing tasks internally with high precision. Direct file editing within RA.Aid streamlines the edit-apply feedback loop, dramatically boosting efficiency and responsiveness. Tasks that previously required multiple interactions now often complete in fewer iterations. Early internal testing shows notable improvements in both execution speed and token efficiency—critical aspects for any AI-driven workflow.\nWe approached this transition thoughtfully, balancing technical trade-offs carefully. Aider\u0026rsquo;s maturity and comprehensive features, like automatic linting and diff parsing, initially set a high bar for our direct editing implementation. Replacing Aider meant rigorously building and testing internal mechanisms to replicate and enhance these functionalities. Despite the initial complexity, the benefits—simplified architecture, reduced dependency overhead, faster iteration cycles, and tighter integration with RA.Aid\u0026rsquo;s advanced reasoning models—clearly justified the effort.\nFor users who still appreciate Aider\u0026rsquo;s proven workflow or prefer its specific capabilities, RA.Aid continues to support Aider via the \u0026ndash;use-aider flag. However, direct editing is now the recommended default, representing a significant advancement toward our goal of truly autonomous software development.\nThis shift signifies RA.Aid\u0026rsquo;s growing maturity as an open-source project, moving closer to our ultimate mission: empowering developers to spend more time on creative problem-solving and less on repetitive code mechanics. It\u0026rsquo;s a testament to how iterative experimentation and real-world experience drive meaningful innovation.\nWe\u0026rsquo;re genuinely excited about RA.Aid\u0026rsquo;s future and deeply value the community\u0026rsquo;s input as we continue pushing the boundaries of autonomous coding. Whether you\u0026rsquo;re interested in trying it out, reporting issues, or contributing to the codebase, everyone is welcome to be part of this journey. Visit our GitHub repository to learn more about how you can get involved.\n","permalink":"//localhost:1313/posts/raaid-journey/","summary":"\u003cp\u003eWhen we first started building \u003ca href=\"https://github.com/ai-christianson/RA.Aid\"\u003eRA.Aid\u003c/a\u003e, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\u003c/p\u003e\n\u003cp\u003eInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\u003c/p\u003e","title":"RA.Aid's Journey: From Leveraging Aider to Autonomous Editing"},{"content":"When we first started building RA.Aid, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\nInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\nThe beginning of our journey: RA.Aid\u0026#39;s initial announcement in the Aider Discord This integration, however, had trade-offs. Each interaction with Aider meant an additional layer of complexity and expense. RA.Aid had to pass context and instructions to Aider, wait for edits, parse the results, and then reconcile its internal state with these changes. This indirect process sometimes led to mismatches and introduced latency into the otherwise fluid agent loop.\nOver time, it became clear that RA.Aid\u0026rsquo;s own capabilities were quickly outgrowing the original reliance on Aider. Our community\u0026rsquo;s contributions to RA.Aid\u0026rsquo;s reasoning and planning tools—such as the built-in expert query system, file tracking, fuzzy search, ripgrep integration, and Tavily-powered web searches—were becoming robust enough to handle editing tasks directly. Essentially, we found ourselves using Aider predominantly as a basic file editor, no longer leveraging its full potential. This was a clear signal: it was time for RA.Aid to evolve.\nThe recent launch of Sonnet 3.7 and RA.Aid\u0026rsquo;s version 0.15.0 marked the perfect moment to introduce our new \u0026ldquo;aider-free\u0026rdquo; mode. Sonnet 3.7 is significantly better at performing reliable and consistent partial file edits compared to earlier models. This enhanced reliability was the tipping point, giving us confidence that RA.Aid could handle editing tasks internally with high precision. Direct file editing within RA.Aid streamlines the edit-apply feedback loop, dramatically boosting efficiency and responsiveness. Tasks that previously required multiple interactions now often complete in fewer iterations. Early internal testing shows notable improvements in both execution speed and token efficiency—critical aspects for any AI-driven workflow.\nWe approached this transition thoughtfully, balancing technical trade-offs carefully. Aider\u0026rsquo;s maturity and comprehensive features, like automatic linting and diff parsing, initially set a high bar for our direct editing implementation. Replacing Aider meant rigorously building and testing internal mechanisms to replicate and enhance these functionalities. Despite the initial complexity, the benefits—simplified architecture, reduced dependency overhead, faster iteration cycles, and tighter integration with RA.Aid\u0026rsquo;s advanced reasoning models—clearly justified the effort.\nFor users who still appreciate Aider\u0026rsquo;s proven workflow or prefer its specific capabilities, RA.Aid continues to support Aider via the \u0026ndash;use-aider flag. However, direct editing is now the recommended default, representing a significant advancement toward our goal of truly autonomous software development.\nThis shift signifies RA.Aid\u0026rsquo;s growing maturity as an open-source project, moving closer to our ultimate mission: empowering developers to spend more time on creative problem-solving and less on repetitive code mechanics. It\u0026rsquo;s a testament to how iterative experimentation and real-world experience drive meaningful innovation.\nWe\u0026rsquo;re genuinely excited about RA.Aid\u0026rsquo;s future and deeply value the community\u0026rsquo;s input as we continue pushing the boundaries of autonomous coding. Whether you\u0026rsquo;re interested in trying it out, reporting issues, or contributing to the codebase, everyone is welcome to be part of this journey. Visit our GitHub repository to learn more about how you can get involved.\n","permalink":"//localhost:1313/posts/raaid-journey/","summary":"\u003cp\u003eWhen we first started building \u003ca href=\"https://github.com/ai-christianson/RA.Aid\"\u003eRA.Aid\u003c/a\u003e, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\u003c/p\u003e\n\u003cp\u003eInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\u003c/p\u003e","title":"RA.Aid's Journey: From Leveraging Aider to Autonomous Editing"},{"content":"Building a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B model. This implementation demonstrates the elegance of modern AI frameworks and the accessibility of running large language models locally.\nThe Complete Agent Here\u0026rsquo;s the entire implementation:\n# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai # # to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; from smolagents import CodeAgent, MLXModel, tool from subprocess import run import sys @tool def write_file(path: str, content: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Write text. Args: path (str): File path. content (str): Text to write. Returns: str: Status. \u0026#34;\u0026#34;\u0026#34; try: open(path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;).write(content) return f\u0026#34;saved:{path}\u0026#34; except Exception as e: return f\u0026#34;error:{e}\u0026#34; @tool def sh(cmd: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Run a shell command. Args: cmd (str): Command to execute. Returns: str: stdout+stderr. \u0026#34;\u0026#34;\u0026#34; try: r = run(cmd, shell=True, capture_output=True, text=True) return r.stdout + r.stderr except Exception as e: return f\u0026#34;error:{e}\u0026#34; if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) \u0026lt; 2: print(\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;); sys.exit(1) common = \u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34; agent = CodeAgent( model=MLXModel(model_id=\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;, max_tokens=8192, trust_remote_code=True), tools=[write_file, sh], add_base_tools=True, ) print(agent.run(\u0026#34; \u0026#34;.join(sys.argv[1:]) + \u0026#34; \u0026#34; + common)) What Makes This Special This tiny agent packs a surprising amount of functionality:\nCompletely Local: Runs entirely on your machine with no external API calls Powerful Model: Uses the Qwen3 30B model optimized for Apple Silicon via MLX Tool Integration: Can execute shell commands and write files Simple Interface: Just pass your question as a command-line argument Key Components The Model The agent uses mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2, a quantized version of Qwen3 30B optimized for coding tasks. The 4-bit quantization makes it possible to run this large model on consumer hardware while maintaining excellent performance.\nCustom Tools Two simple but powerful tools are defined:\nwrite_file: Allows the agent to create and modify files sh: Enables execution of any shell command The Framework Built on smolagents, a lightweight framework that makes it easy to create AI agents with tool-calling capabilities. The CodeAgent class handles the orchestration between the model and tools.\nRunning the Agent Getting started is remarkably simple with uv:\nuv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; This command:\nInstalls the required dependencies (smolagents with MLX support and ddgs for web search) Runs the agent with your question The agent analyzes the request and executes df -h to check disk space Example Use Cases The agent can handle a variety of tasks:\nSystem Information: \u0026ldquo;How much RAM is being used?\u0026rdquo; File Operations: \u0026ldquo;Create a README.md file for a Python project\u0026rdquo; Code Analysis: \u0026ldquo;What Python files are in this directory?\u0026rdquo; Development Tasks: \u0026ldquo;Check if there are any TODO comments in my code\u0026rdquo; The Power of Simplicity What\u0026rsquo;s remarkable about this implementation is how much functionality is achieved with so little code. By leveraging modern frameworks like smolagents and optimized models like Qwen3 30B, we can create sophisticated AI agents without the complexity traditionally associated with such systems.\nThis approach demonstrates that powerful AI tools don\u0026rsquo;t need to be black boxes running in the cloud. With the right tools and frameworks, anyone can build and customize their own AI agents that run entirely under their control.\nGet the Code The complete implementation is available as a GitHub Gist: smol.py\nTry it out and see what you can build with just 44 lines of code!\n","permalink":"//localhost:1313/posts/local-ai-agent/","summary":"\u003cp\u003eBuilding a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B model. This implementation demonstrates the elegance of modern AI frameworks and the accessibility of running large language models locally.\u003c/p\u003e\n\u003ch2 id=\"the-complete-agent\"\u003eThe Complete Agent\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s the entire implementation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e smolagents \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e CodeAgent, MLXModel, tool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e subprocess \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e run\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewrite_file\u003c/span\u003e(path: str, content: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Write text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      path (str): File path.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      content (str): Text to write.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: Status.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        open(path, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saved:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003epath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esh\u003c/span\u003e(cmd: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Run a shell command.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      cmd (str): Command to execute.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: stdout+stderr.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        r \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e run(cmd, shell\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, capture_output\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, text\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estdout \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;\u003c/span\u003e); sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexit(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    common \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    agent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CodeAgent(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        model\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eMLXModel(model_id\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;\u003c/span\u003e, max_tokens\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8192\u003c/span\u003e, trust_remote_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[write_file, sh],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add_base_tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(agent\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e common))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"what-makes-this-special\"\u003eWhat Makes This Special\u003c/h2\u003e\n\u003cp\u003eThis tiny agent packs a surprising amount of functionality:\u003c/p\u003e","title":"Entirely local AI agent in 44 lines of code using Qwen3 30B A3B"},{"content":"When we first started building RA.Aid, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\nInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\nThe beginning of our journey: RA.Aid\u0026#39;s initial announcement in the Aider Discord This integration, however, had trade-offs. Each interaction with Aider meant an additional layer of complexity and expense. RA.Aid had to pass context and instructions to Aider, wait for edits, parse the results, and then reconcile its internal state with these changes. This indirect process sometimes led to mismatches and introduced latency into the otherwise fluid agent loop.\nOver time, it became clear that RA.Aid\u0026rsquo;s own capabilities were quickly outgrowing the original reliance on Aider. Our community\u0026rsquo;s contributions to RA.Aid\u0026rsquo;s reasoning and planning tools—such as the built-in expert query system, file tracking, fuzzy search, ripgrep integration, and Tavily-powered web searches—were becoming robust enough to handle editing tasks directly. Essentially, we found ourselves using Aider predominantly as a basic file editor, no longer leveraging its full potential. This was a clear signal: it was time for RA.Aid to evolve.\nThe recent launch of Sonnet 3.7 and RA.Aid\u0026rsquo;s version 0.15.0 marked the perfect moment to introduce our new \u0026ldquo;aider-free\u0026rdquo; mode. Sonnet 3.7 is significantly better at performing reliable and consistent partial file edits compared to earlier models. This enhanced reliability was the tipping point, giving us confidence that RA.Aid could handle editing tasks internally with high precision. Direct file editing within RA.Aid streamlines the edit-apply feedback loop, dramatically boosting efficiency and responsiveness. Tasks that previously required multiple interactions now often complete in fewer iterations. Early internal testing shows notable improvements in both execution speed and token efficiency—critical aspects for any AI-driven workflow.\nWe approached this transition thoughtfully, balancing technical trade-offs carefully. Aider\u0026rsquo;s maturity and comprehensive features, like automatic linting and diff parsing, initially set a high bar for our direct editing implementation. Replacing Aider meant rigorously building and testing internal mechanisms to replicate and enhance these functionalities. Despite the initial complexity, the benefits—simplified architecture, reduced dependency overhead, faster iteration cycles, and tighter integration with RA.Aid\u0026rsquo;s advanced reasoning models—clearly justified the effort.\nFor users who still appreciate Aider\u0026rsquo;s proven workflow or prefer its specific capabilities, RA.Aid continues to support Aider via the \u0026ndash;use-aider flag. However, direct editing is now the recommended default, representing a significant advancement toward our goal of truly autonomous software development.\nThis shift signifies RA.Aid\u0026rsquo;s growing maturity as an open-source project, moving closer to our ultimate mission: empowering developers to spend more time on creative problem-solving and less on repetitive code mechanics. It\u0026rsquo;s a testament to how iterative experimentation and real-world experience drive meaningful innovation.\nWe\u0026rsquo;re genuinely excited about RA.Aid\u0026rsquo;s future and deeply value the community\u0026rsquo;s input as we continue pushing the boundaries of autonomous coding. Whether you\u0026rsquo;re interested in trying it out, reporting issues, or contributing to the codebase, everyone is welcome to be part of this journey. Visit our GitHub repository to learn more about how you can get involved.\n","permalink":"//localhost:1313/posts/raaid-journey/","summary":"\u003cp\u003eWhen we first started building \u003ca href=\"https://github.com/ai-christianson/RA.Aid\"\u003eRA.Aid\u003c/a\u003e, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\u003c/p\u003e\n\u003cp\u003eInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\u003c/p\u003e","title":"RA.Aid's Journey: From Leveraging Aider to Autonomous Editing"},{"content":"Building a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B model. This implementation demonstrates the elegance of modern AI frameworks and the accessibility of running large language models locally.\nThe Complete Agent Here\u0026rsquo;s the entire implementation:\n# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai # # to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; from smolagents import CodeAgent, MLXModel, tool from subprocess import run import sys @tool def write_file(path: str, content: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Write text. Args: path (str): File path. content (str): Text to write. Returns: str: Status. \u0026#34;\u0026#34;\u0026#34; try: open(path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;).write(content) return f\u0026#34;saved:{path}\u0026#34; except Exception as e: return f\u0026#34;error:{e}\u0026#34; @tool def sh(cmd: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Run a shell command. Args: cmd (str): Command to execute. Returns: str: stdout+stderr. \u0026#34;\u0026#34;\u0026#34; try: r = run(cmd, shell=True, capture_output=True, text=True) return r.stdout + r.stderr except Exception as e: return f\u0026#34;error:{e}\u0026#34; if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) \u0026lt; 2: print(\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;); sys.exit(1) common = \u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34; agent = CodeAgent( model=MLXModel(model_id=\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;, max_tokens=8192, trust_remote_code=True), tools=[write_file, sh], add_base_tools=True, ) print(agent.run(\u0026#34; \u0026#34;.join(sys.argv[1:]) + \u0026#34; \u0026#34; + common)) What Makes This Special This tiny agent packs a surprising amount of functionality:\nCompletely Local: Runs entirely on your machine with no external API calls Powerful Model: Uses the Qwen3 30B model optimized for Apple Silicon via MLX Tool Integration: Can execute shell commands and write files Simple Interface: Just pass your question as a command-line argument Key Components The Model The agent uses mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2, a quantized version of Qwen3 30B optimized for coding tasks. The 4-bit quantization makes it possible to run this large model on consumer hardware while maintaining excellent performance.\nCustom Tools Two simple but powerful tools are defined:\nwrite_file: Allows the agent to create and modify files sh: Enables execution of any shell command The Framework Built on smolagents, a lightweight framework that makes it easy to create AI agents with tool-calling capabilities. The CodeAgent class handles the orchestration between the model and tools.\nRunning the Agent Getting started is remarkably simple with uv:\nuv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; This command:\nInstalls the required dependencies (smolagents with MLX support and ddgs for web search) Runs the agent with your question The agent analyzes the request and executes df -h to check disk space Example Use Cases The agent can handle a variety of tasks:\nSystem Information: \u0026ldquo;How much RAM is being used?\u0026rdquo; File Operations: \u0026ldquo;Create a README.md file for a Python project\u0026rdquo; Code Analysis: \u0026ldquo;What Python files are in this directory?\u0026rdquo; Development Tasks: \u0026ldquo;Check if there are any TODO comments in my code\u0026rdquo; The Power of Simplicity What\u0026rsquo;s remarkable about this implementation is how much functionality is achieved with so little code. By leveraging modern frameworks like smolagents and optimized models like Qwen3 30B, we can create sophisticated AI agents without the complexity traditionally associated with such systems.\nThis approach demonstrates that powerful AI tools don\u0026rsquo;t need to be black boxes running in the cloud. With the right tools and frameworks, anyone can build and customize their own AI agents that run entirely under their control.\nGet the Code The complete implementation is available as a GitHub Gist: smol.py\nTry it out and see what you can build with just 44 lines of code!\n","permalink":"//localhost:1313/posts/local-ai-agent/","summary":"\u003cp\u003eBuilding a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B model. This implementation demonstrates the elegance of modern AI frameworks and the accessibility of running large language models locally.\u003c/p\u003e\n\u003ch2 id=\"the-complete-agent\"\u003eThe Complete Agent\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s the entire implementation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e smolagents \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e CodeAgent, MLXModel, tool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e subprocess \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e run\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewrite_file\u003c/span\u003e(path: str, content: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Write text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      path (str): File path.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      content (str): Text to write.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: Status.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        open(path, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saved:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003epath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esh\u003c/span\u003e(cmd: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Run a shell command.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      cmd (str): Command to execute.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: stdout+stderr.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        r \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e run(cmd, shell\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, capture_output\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, text\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estdout \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;\u003c/span\u003e); sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexit(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    common \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    agent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CodeAgent(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        model\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eMLXModel(model_id\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;\u003c/span\u003e, max_tokens\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8192\u003c/span\u003e, trust_remote_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[write_file, sh],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add_base_tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(agent\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e common))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"what-makes-this-special\"\u003eWhat Makes This Special\u003c/h2\u003e\n\u003cp\u003eThis tiny agent packs a surprising amount of functionality:\u003c/p\u003e","title":"Entirely local AI agent in 44 lines of code using Qwen3 30B A3B"},{"content":"Building a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B model. This implementation demonstrates the elegance of modern AI frameworks and the accessibility of running large language models locally.\nThe Complete Agent Here\u0026rsquo;s the entire implementation:\n# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai # # to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; from smolagents import CodeAgent, MLXModel, tool from subprocess import run import sys @tool def write_file(path: str, content: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Write text. Args: path (str): File path. content (str): Text to write. Returns: str: Status. \u0026#34;\u0026#34;\u0026#34; try: open(path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;).write(content) return f\u0026#34;saved:{path}\u0026#34; except Exception as e: return f\u0026#34;error:{e}\u0026#34; @tool def sh(cmd: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Run a shell command. Args: cmd (str): Command to execute. Returns: str: stdout+stderr. \u0026#34;\u0026#34;\u0026#34; try: r = run(cmd, shell=True, capture_output=True, text=True) return r.stdout + r.stderr except Exception as e: return f\u0026#34;error:{e}\u0026#34; if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) \u0026lt; 2: print(\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;); sys.exit(1) common = \u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34; agent = CodeAgent( model=MLXModel(model_id=\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;, max_tokens=8192, trust_remote_code=True), tools=[write_file, sh], add_base_tools=True, ) print(agent.run(\u0026#34; \u0026#34;.join(sys.argv[1:]) + \u0026#34; \u0026#34; + common)) What Makes This Special This tiny agent packs a surprising amount of functionality:\nCompletely Local: Runs entirely on your machine with no external API calls Powerful Model: Uses the Qwen3 30B model optimized for Apple Silicon via MLX Tool Integration: Can execute shell commands and write files Simple Interface: Just pass your question as a command-line argument Key Components The Model The agent uses mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2, a quantized version of Qwen3 30B optimized for coding tasks. The 4-bit quantization makes it possible to run this large model on consumer hardware while maintaining excellent performance.\nCustom Tools Two simple but powerful tools are defined:\nwrite_file: Allows the agent to create and modify files sh: Enables execution of any shell command The Framework Built on smolagents, a lightweight framework that makes it easy to create AI agents with tool-calling capabilities. The CodeAgent class handles the orchestration between the model and tools.\nRunning the Agent Getting started is remarkably simple with uv:\nuv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; This command:\nInstalls the required dependencies (smolagents with MLX support and ddgs for web search) Runs the agent with your question The agent analyzes the request and executes df -h to check disk space Example Use Cases The agent can handle a variety of tasks:\nSystem Information: \u0026ldquo;How much RAM is being used?\u0026rdquo; File Operations: \u0026ldquo;Create a README.md file for a Python project\u0026rdquo; Code Analysis: \u0026ldquo;What Python files are in this directory?\u0026rdquo; Development Tasks: \u0026ldquo;Check if there are any TODO comments in my code\u0026rdquo; The Power of Simplicity What\u0026rsquo;s remarkable about this implementation is how much functionality is achieved with so little code. By leveraging modern frameworks like smolagents and optimized models like Qwen3 30B, we can create sophisticated AI agents without the complexity traditionally associated with such systems.\nThis approach demonstrates that powerful AI tools don\u0026rsquo;t need to be black boxes running in the cloud. With the right tools and frameworks, anyone can build and customize their own AI agents that run entirely under their control.\nGet the Code The complete implementation is available as a GitHub Gist: smol.py\nTry it out and see what you can build with just 44 lines of code!\n","permalink":"//localhost:1313/posts/local-ai-agent/","summary":"\u003cp\u003eBuilding a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B model. This implementation demonstrates the elegance of modern AI frameworks and the accessibility of running large language models locally.\u003c/p\u003e\n\u003ch2 id=\"the-complete-agent\"\u003eThe Complete Agent\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s the entire implementation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e smolagents \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e CodeAgent, MLXModel, tool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e subprocess \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e run\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewrite_file\u003c/span\u003e(path: str, content: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Write text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      path (str): File path.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      content (str): Text to write.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: Status.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        open(path, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saved:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003epath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esh\u003c/span\u003e(cmd: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Run a shell command.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      cmd (str): Command to execute.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: stdout+stderr.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        r \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e run(cmd, shell\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, capture_output\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, text\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estdout \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;\u003c/span\u003e); sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexit(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    common \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    agent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CodeAgent(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        model\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eMLXModel(model_id\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;\u003c/span\u003e, max_tokens\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8192\u003c/span\u003e, trust_remote_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[write_file, sh],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add_base_tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(agent\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e common))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"what-makes-this-special\"\u003eWhat Makes This Special\u003c/h2\u003e\n\u003cp\u003eThis tiny agent packs a surprising amount of functionality:\u003c/p\u003e","title":"Entirely local AI agent in 44 lines of code using Qwen3 30B A3B"},{"content":"When we first started building RA.Aid, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\nInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\nThe beginning of our journey: RA.Aid\u0026#39;s initial announcement in the Aider Discord This integration, however, had trade-offs. Each interaction with Aider meant an additional layer of complexity and expense. RA.Aid had to pass context and instructions to Aider, wait for edits, parse the results, and then reconcile its internal state with these changes. This indirect process sometimes led to mismatches and introduced latency into the otherwise fluid agent loop.\nOver time, it became clear that RA.Aid\u0026rsquo;s own capabilities were quickly outgrowing the original reliance on Aider. Our community\u0026rsquo;s contributions to RA.Aid\u0026rsquo;s reasoning and planning tools—such as the built-in expert query system, file tracking, fuzzy search, ripgrep integration, and Tavily-powered web searches—were becoming robust enough to handle editing tasks directly. Essentially, we found ourselves using Aider predominantly as a basic file editor, no longer leveraging its full potential. This was a clear signal: it was time for RA.Aid to evolve.\nThe recent launch of Sonnet 3.7 and RA.Aid\u0026rsquo;s version 0.15.0 marked the perfect moment to introduce our new \u0026ldquo;aider-free\u0026rdquo; mode. Sonnet 3.7 is significantly better at performing reliable and consistent partial file edits compared to earlier models. This enhanced reliability was the tipping point, giving us confidence that RA.Aid could handle editing tasks internally with high precision. Direct file editing within RA.Aid streamlines the edit-apply feedback loop, dramatically boosting efficiency and responsiveness. Tasks that previously required multiple interactions now often complete in fewer iterations. Early internal testing shows notable improvements in both execution speed and token efficiency—critical aspects for any AI-driven workflow.\nWe approached this transition thoughtfully, balancing technical trade-offs carefully. Aider\u0026rsquo;s maturity and comprehensive features, like automatic linting and diff parsing, initially set a high bar for our direct editing implementation. Replacing Aider meant rigorously building and testing internal mechanisms to replicate and enhance these functionalities. Despite the initial complexity, the benefits—simplified architecture, reduced dependency overhead, faster iteration cycles, and tighter integration with RA.Aid\u0026rsquo;s advanced reasoning models—clearly justified the effort.\nFor users who still appreciate Aider\u0026rsquo;s proven workflow or prefer its specific capabilities, RA.Aid continues to support Aider via the \u0026ndash;use-aider flag. However, direct editing is now the recommended default, representing a significant advancement toward our goal of truly autonomous software development.\nThis shift signifies RA.Aid\u0026rsquo;s growing maturity as an open-source project, moving closer to our ultimate mission: empowering developers to spend more time on creative problem-solving and less on repetitive code mechanics. It\u0026rsquo;s a testament to how iterative experimentation and real-world experience drive meaningful innovation.\nWe\u0026rsquo;re genuinely excited about RA.Aid\u0026rsquo;s future and deeply value the community\u0026rsquo;s input as we continue pushing the boundaries of autonomous coding. Whether you\u0026rsquo;re interested in trying it out, reporting issues, or contributing to the codebase, everyone is welcome to be part of this journey. Visit our GitHub repository to learn more about how you can get involved.\n","permalink":"//localhost:1313/posts/raaid-journey/","summary":"\u003cp\u003eWhen we first started building \u003ca href=\"https://github.com/ai-christianson/RA.Aid\"\u003eRA.Aid\u003c/a\u003e, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\u003c/p\u003e\n\u003cp\u003eInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\u003c/p\u003e","title":"RA.Aid's Journey: From Leveraging Aider to Autonomous Editing"},{"content":"Building a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B A3B Instruct model.\nThe Complete Agent Here\u0026rsquo;s the entire implementation:\n# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai # # to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; from smolagents import CodeAgent, MLXModel, tool from subprocess import run import sys @tool def write_file(path: str, content: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Write text. Args: path (str): File path. content (str): Text to write. Returns: str: Status. \u0026#34;\u0026#34;\u0026#34; try: open(path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;).write(content) return f\u0026#34;saved:{path}\u0026#34; except Exception as e: return f\u0026#34;error:{e}\u0026#34; @tool def sh(cmd: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Run a shell command. Args: cmd (str): Command to execute. Returns: str: stdout+stderr. \u0026#34;\u0026#34;\u0026#34; try: r = run(cmd, shell=True, capture_output=True, text=True) return r.stdout + r.stderr except Exception as e: return f\u0026#34;error:{e}\u0026#34; if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) \u0026lt; 2: print(\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;); sys.exit(1) common = \u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34; agent = CodeAgent( model=MLXModel(model_id=\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;, max_tokens=8192, trust_remote_code=True), tools=[write_file, sh], add_base_tools=True, ) print(agent.run(\u0026#34; \u0026#34;.join(sys.argv[1:]) + \u0026#34; \u0026#34; + common)) What Makes This Special This tiny agent packs a surprising amount of functionality:\nCompletely Local: Runs entirely on your machine with no external API calls Powerful Model: Uses the Qwen3 30B model optimized for Apple Silicon via MLX Tool Integration: Can execute shell commands and write files Simple Interface: Just pass your question as a command-line argument Key Components The Model The agent uses mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2, a quantized version of Qwen3 30B optimized for coding tasks. The 4-bit quantization makes it possible to run this large model on consumer hardware while maintaining excellent performance.\nCustom Tools Two simple but powerful tools are defined:\nwrite_file: Allows the agent to create and modify files sh: Enables execution of any shell command The Framework Built on smolagents, a lightweight framework that makes it easy to create AI agents with tool-calling capabilities. The CodeAgent class handles the orchestration between the model and tools.\nRunning the Agent Getting started is remarkably simple with uv:\nuv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; This command:\nInstalls the required dependencies (smolagents with MLX support and ddgs for web search) Runs the agent with your question The agent analyzes the request and executes df -h to check disk space Example Use Cases The agent can handle a variety of tasks:\nSystem Information: \u0026ldquo;How much RAM is being used?\u0026rdquo; File Operations: \u0026ldquo;Create a README.md file for a Python project\u0026rdquo; Code Analysis: \u0026ldquo;What Python files are in this directory?\u0026rdquo; Development Tasks: \u0026ldquo;Check if there are any TODO comments in my code\u0026rdquo; The Power of Simplicity What\u0026rsquo;s remarkable about this implementation is how much functionality is achieved with so little code. By leveraging modern frameworks like smolagents and optimized models like Qwen3 30B, we can create sophisticated AI agents without the complexity traditionally associated with such systems.\nThis approach demonstrates that powerful AI tools don\u0026rsquo;t need to be black boxes running in the cloud. With the right tools and frameworks, anyone can build and customize their own AI agents that run entirely under their control.\nGet the Code The complete implementation is available as a GitHub Gist: smol.py\nTry it out and see what you can build with just 44 lines of code!\n","permalink":"//localhost:1313/posts/local-ai-agent/","summary":"\u003cp\u003eBuilding a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B A3B Instruct model.\u003c/p\u003e\n\u003ch2 id=\"the-complete-agent\"\u003eThe Complete Agent\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s the entire implementation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e smolagents \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e CodeAgent, MLXModel, tool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e subprocess \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e run\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewrite_file\u003c/span\u003e(path: str, content: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Write text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      path (str): File path.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      content (str): Text to write.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: Status.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        open(path, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saved:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003epath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esh\u003c/span\u003e(cmd: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Run a shell command.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      cmd (str): Command to execute.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: stdout+stderr.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        r \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e run(cmd, shell\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, capture_output\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, text\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estdout \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;\u003c/span\u003e); sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexit(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    common \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    agent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CodeAgent(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        model\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eMLXModel(model_id\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;\u003c/span\u003e, max_tokens\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8192\u003c/span\u003e, trust_remote_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[write_file, sh],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add_base_tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(agent\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e common))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"what-makes-this-special\"\u003eWhat Makes This Special\u003c/h2\u003e\n\u003cp\u003eThis tiny agent packs a surprising amount of functionality:\u003c/p\u003e","title":"Entirely local AI agent in 44 lines of code using Qwen3 30B A3B"},{"content":"When we first started building RA.Aid, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\nInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\nThe beginning of our journey: RA.Aid\u0026#39;s initial announcement in the Aider Discord This integration, however, had trade-offs. Each interaction with Aider meant an additional layer of complexity and expense. RA.Aid had to pass context and instructions to Aider, wait for edits, parse the results, and then reconcile its internal state with these changes. This indirect process sometimes led to mismatches and introduced latency into the otherwise fluid agent loop.\nOver time, it became clear that RA.Aid\u0026rsquo;s own capabilities were quickly outgrowing the original reliance on Aider. Our community\u0026rsquo;s contributions to RA.Aid\u0026rsquo;s reasoning and planning tools—such as the built-in expert query system, file tracking, fuzzy search, ripgrep integration, and Tavily-powered web searches—were becoming robust enough to handle editing tasks directly. Essentially, we found ourselves using Aider predominantly as a basic file editor, no longer leveraging its full potential. This was a clear signal: it was time for RA.Aid to evolve.\nThe recent launch of Sonnet 3.7 and RA.Aid\u0026rsquo;s version 0.15.0 marked the perfect moment to introduce our new \u0026ldquo;aider-free\u0026rdquo; mode. Sonnet 3.7 is significantly better at performing reliable and consistent partial file edits compared to earlier models. This enhanced reliability was the tipping point, giving us confidence that RA.Aid could handle editing tasks internally with high precision. Direct file editing within RA.Aid streamlines the edit-apply feedback loop, dramatically boosting efficiency and responsiveness. Tasks that previously required multiple interactions now often complete in fewer iterations. Early internal testing shows notable improvements in both execution speed and token efficiency—critical aspects for any AI-driven workflow.\nWe approached this transition thoughtfully, balancing technical trade-offs carefully. Aider\u0026rsquo;s maturity and comprehensive features, like automatic linting and diff parsing, initially set a high bar for our direct editing implementation. Replacing Aider meant rigorously building and testing internal mechanisms to replicate and enhance these functionalities. Despite the initial complexity, the benefits—simplified architecture, reduced dependency overhead, faster iteration cycles, and tighter integration with RA.Aid\u0026rsquo;s advanced reasoning models—clearly justified the effort.\nFor users who still appreciate Aider\u0026rsquo;s proven workflow or prefer its specific capabilities, RA.Aid continues to support Aider via the \u0026ndash;use-aider flag. However, direct editing is now the recommended default, representing a significant advancement toward our goal of truly autonomous software development.\nThis shift signifies RA.Aid\u0026rsquo;s growing maturity as an open-source project, moving closer to our ultimate mission: empowering developers to spend more time on creative problem-solving and less on repetitive code mechanics. It\u0026rsquo;s a testament to how iterative experimentation and real-world experience drive meaningful innovation.\nWe\u0026rsquo;re genuinely excited about RA.Aid\u0026rsquo;s future and deeply value the community\u0026rsquo;s input as we continue pushing the boundaries of autonomous coding. Whether you\u0026rsquo;re interested in trying it out, reporting issues, or contributing to the codebase, everyone is welcome to be part of this journey. Visit our GitHub repository to learn more about how you can get involved.\n","permalink":"//localhost:1313/posts/raaid-journey/","summary":"\u003cp\u003eWhen we first started building \u003ca href=\"https://github.com/ai-christianson/RA.Aid\"\u003eRA.Aid\u003c/a\u003e, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\u003c/p\u003e\n\u003cp\u003eInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\u003c/p\u003e","title":"RA.Aid's Journey: From Leveraging Aider to Autonomous Editing"},{"content":"Building a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B A3B Instruct model.\nThe Complete Agent Here\u0026rsquo;s the entire implementation:\n# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai # # to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39; from smolagents import CodeAgent, MLXModel, tool from subprocess import run import sys @tool def write_file(path: str, content: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Write text. Args: path (str): File path. content (str): Text to write. Returns: str: Status. \u0026#34;\u0026#34;\u0026#34; try: open(path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;).write(content) return f\u0026#34;saved:{path}\u0026#34; except Exception as e: return f\u0026#34;error:{e}\u0026#34; @tool def sh(cmd: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Run a shell command. Args: cmd (str): Command to execute. Returns: str: stdout+stderr. \u0026#34;\u0026#34;\u0026#34; try: r = run(cmd, shell=True, capture_output=True, text=True) return r.stdout + r.stderr except Exception as e: return f\u0026#34;error:{e}\u0026#34; if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) \u0026lt; 2: print(\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;); sys.exit(1) common = \u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34; agent = CodeAgent( model=MLXModel(model_id=\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;, max_tokens=8192, trust_remote_code=True), tools=[write_file, sh], add_base_tools=True, ) print(agent.run(\u0026#34; \u0026#34;.join(sys.argv[1:]) + \u0026#34; \u0026#34; + common)) ","permalink":"//localhost:1313/posts/local-ai-agent/","summary":"\u003cp\u003eBuilding a fully functional AI agent doesn\u0026rsquo;t have to be complex. In just 44 lines of Python code, you can create a powerful local AI agent that runs entirely on your machine using the Qwen3 30B A3B Instruct model.\u003c/p\u003e\n\u003ch2 id=\"the-complete-agent\"\u003eThe Complete Agent\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s the entire implementation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# example tiny local agent by A.I. Christianson, founder of gobii.ai, builder of ra-aid.ai\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# to run: uv run --with \u0026#39;smolagents[mlx-lm]\u0026#39; --with ddgs smol.py \u0026#39;how much free disk space do I have?\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e smolagents \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e CodeAgent, MLXModel, tool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e subprocess \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e run\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewrite_file\u003c/span\u003e(path: str, content: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Write text.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      path (str): File path.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      content (str): Text to write.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: Status.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        open(path, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;saved:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003epath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@tool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esh\u003c/span\u003e(cmd: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;Run a shell command.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Args:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      cmd (str): Command to execute.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Returns:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e      str: stdout+stderr.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        r \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e run(cmd, shell\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, capture_output\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, text\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estdout \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e r\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ee\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;usage: python agent.py \u0026#39;your prompt\u0026#39;\u0026#34;\u003c/span\u003e); sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexit(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    common \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;use cat/head to read files, use rg to search, use ls and standard shell commands to explore.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    agent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CodeAgent(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        model\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eMLXModel(model_id\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mlx-community/Qwen3-Coder-30B-A3B-Instruct-4bit-dwq-v2\u0026#34;\u003c/span\u003e, max_tokens\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8192\u003c/span\u003e, trust_remote_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[write_file, sh],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add_base_tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(agent\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e common))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Entirely local AI agent in 44 lines of code using Qwen3 30B A3B"},{"content":"When we first started building RA.Aid, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\nInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\nThe beginning of our journey: RA.Aid\u0026#39;s initial announcement in the Aider Discord This integration, however, had trade-offs. Each interaction with Aider meant an additional layer of complexity and expense. RA.Aid had to pass context and instructions to Aider, wait for edits, parse the results, and then reconcile its internal state with these changes. This indirect process sometimes led to mismatches and introduced latency into the otherwise fluid agent loop.\nOver time, it became clear that RA.Aid\u0026rsquo;s own capabilities were quickly outgrowing the original reliance on Aider. Our community\u0026rsquo;s contributions to RA.Aid\u0026rsquo;s reasoning and planning tools—such as the built-in expert query system, file tracking, fuzzy search, ripgrep integration, and Tavily-powered web searches—were becoming robust enough to handle editing tasks directly. Essentially, we found ourselves using Aider predominantly as a basic file editor, no longer leveraging its full potential. This was a clear signal: it was time for RA.Aid to evolve.\nThe recent launch of Sonnet 3.7 and RA.Aid\u0026rsquo;s version 0.15.0 marked the perfect moment to introduce our new \u0026ldquo;aider-free\u0026rdquo; mode. Sonnet 3.7 is significantly better at performing reliable and consistent partial file edits compared to earlier models. This enhanced reliability was the tipping point, giving us confidence that RA.Aid could handle editing tasks internally with high precision. Direct file editing within RA.Aid streamlines the edit-apply feedback loop, dramatically boosting efficiency and responsiveness. Tasks that previously required multiple interactions now often complete in fewer iterations. Early internal testing shows notable improvements in both execution speed and token efficiency—critical aspects for any AI-driven workflow.\nWe approached this transition thoughtfully, balancing technical trade-offs carefully. Aider\u0026rsquo;s maturity and comprehensive features, like automatic linting and diff parsing, initially set a high bar for our direct editing implementation. Replacing Aider meant rigorously building and testing internal mechanisms to replicate and enhance these functionalities. Despite the initial complexity, the benefits—simplified architecture, reduced dependency overhead, faster iteration cycles, and tighter integration with RA.Aid\u0026rsquo;s advanced reasoning models—clearly justified the effort.\nFor users who still appreciate Aider\u0026rsquo;s proven workflow or prefer its specific capabilities, RA.Aid continues to support Aider via the \u0026ndash;use-aider flag. However, direct editing is now the recommended default, representing a significant advancement toward our goal of truly autonomous software development.\nThis shift signifies RA.Aid\u0026rsquo;s growing maturity as an open-source project, moving closer to our ultimate mission: empowering developers to spend more time on creative problem-solving and less on repetitive code mechanics. It\u0026rsquo;s a testament to how iterative experimentation and real-world experience drive meaningful innovation.\nWe\u0026rsquo;re genuinely excited about RA.Aid\u0026rsquo;s future and deeply value the community\u0026rsquo;s input as we continue pushing the boundaries of autonomous coding. Whether you\u0026rsquo;re interested in trying it out, reporting issues, or contributing to the codebase, everyone is welcome to be part of this journey. Visit our GitHub repository to learn more about how you can get involved.\n","permalink":"//localhost:1313/posts/raaid-journey/","summary":"\u003cp\u003eWhen we first started building \u003ca href=\"https://github.com/ai-christianson/RA.Aid\"\u003eRA.Aid\u003c/a\u003e, we saw an opportunity to combine the powerful editing capabilities of the AI programming tool Aider with the flexibility of a LangGraph ReAct agent loop. The vision was clear: create an autonomous coding assistant that could intelligently navigate large codebases, identify relevant files, break down complex tasks into manageable steps, and implement changes with minimal intervention.\u003c/p\u003e\n\u003cp\u003eInitially, integrating Aider made perfect sense. Aider excelled at handling multi-file edits, seamlessly integrating Git workflows, and applying code changes through LLM-generated unified diffs. It allowed RA.Aid to immediately offer sophisticated, context-aware coding assistance out-of-the-box. Developers could issue high-level instructions, and RA.Aid—through Aider—would reliably execute those edits, reducing the back-and-forth typical of early AI tools.\u003c/p\u003e","title":"RA.Aid's Journey: From Leveraging Aider to Autonomous Editing"}]